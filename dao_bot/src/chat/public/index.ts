import {getUserName} from "~/helpers";

require('dotenv').config();

import {Context} from "grammy";
import {user} from '@prisma/client';
import {prismaClient} from "~/db";
import {findUserOrCreate} from "~/repositories/userRepository";

const personalRepliesMap: { [key: number]: string } = {
    0: "But... How? üò®",
    5698437506: "Fucking legend ü•∂",
};

interface RatingChange {
    from: user;
    to: user;
    value: number;
}

const recordRatingChange = (ratingChange: RatingChange, ctx: Context): void => {
    prismaClient.rating_history.findFirst({
        where: {
            from_user: {
                equals: ratingChange.from.tg_id
            },
            to_user: {
                equals: ratingChange.to.tg_id
            },
            created_at: {
                gte: new Date(new Date().setUTCHours(0, 0, 0, 0)),
                lt: new Date(new Date().setUTCHours(24, 0, 0, 0))
            }
        },
    })
        .then((row) => {
            if (row) {
                ctx.reply(`–ü–æ–ø—Ä–æ–±—É–π –∑–∞–≤—Ç—Ä–∞, ${getUserName(ratingChange.from)}!`)
            } else {
                prismaClient.rating_history.create({
                    data: {
                        from_user: ratingChange.from.tg_id,
                        to_user: ratingChange.to.tg_id,
                        rate_value: ratingChange.value,
                    },
                })
                    .then((res) => {
                        let ratingEmoji = ratingChange.value > 0 ? 'üëç' : 'üëé';
                        let replyTarget = ctx.message?.reply_to_message?.from?.is_bot ? '–±–æ—Ç–∞' : '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';

                        getUserRatingMessage(ratingChange.to)
                            .then((ratingText: string) => {
                                ctx.reply(
                                    `${getUserName(ratingChange.from)} –∏–∑–º–µ–Ω–∏–ª —Ä–µ–π—Ç–∏–Ω–≥ ${replyTarget} ${getUserName(ratingChange.to)} ${ratingEmoji}` +
                                    `\n${ratingText}`
                                );
                            })
                    })
                    .catch((e) => {
                        console.error(e);
                        ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
                    })
            }
        })
        .catch((e) => {
            console.error(e);
        })
}

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ –∏ –≤—ã–≤–æ–¥–∞ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const getUserRatingMessage = (targetUser: user): Promise<string> => {
    return prismaClient.rating_history.aggregate({
        _sum: {
            rate_value: true,
        },
        where: {
            to_user: targetUser.tg_id,
        },
    })
        .then((res) => {
            const totalRating = res._sum.rate_value || 0;
            const ratingEmoji = totalRating >= 0 ? 'üòé' : 'üëé';
            return `–†–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetUser.nickname || targetUser.name}: ${totalRating} ${ratingEmoji}`;
        })
        .catch((e) => {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á—ë—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${e}`);
            return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥.";
        })
}

function defaultAnswer(ctx: Context) {
    let id = ctx.message?.from.id || 0,
        text = personalRepliesMap[id] || '',
        max = 1000,
        min = 1,
        rand = Math.floor(
            Math.random() * (max - min + 1) + min
        );

    if (rand === 69 && text) {
        if (ctx.message?.message_id) {
            ctx.reply(text, {
                reply_parameters: {message_id: ctx.message?.message_id},
            });
        } else {
            ctx.reply(text);
        }
    }
}

// –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
export const handleMessage = async (ctx: Context) => {
    let msg = ctx.message?.text || '',
        fromUser = ctx.message?.from;

    if (fromUser && !fromUser.is_bot) {
        findUserOrCreate(fromUser)
            .then((user) => {
                if (!user) {
                    console.error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${fromUser?.id} –Ω–µ –Ω–∞–π–¥–µ–Ω`)
                    ctx.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å—Ç—Ä–∞–Ω–Ω–æ...`)
                } else {
                    if (ctx.message?.reply_to_message?.from) {
                        const targetTelegramUser = ctx.message.reply_to_message.from;

                        findUserOrCreate(targetTelegramUser)
                            .then((targetUser) => {
                                if (!targetUser) {
                                    console.error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${targetTelegramUser?.id} –Ω–µ –Ω–∞–π–¥–µ–Ω`)
                                    ctx.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å—Ç—Ä–∞–Ω–Ω–æ...`)
                                } else {
                                    switch (msg.toLowerCase().trim()) {
                                        case "+rep":
                                        case "+—Ä–µ–ø":
                                            if (ctx.message?.reply_to_message?.from?.id != ctx.message?.from.id) {
                                                recordRatingChange({from: user, to: targetUser, value: 1}, ctx);
                                            }
                                            break;
                                        case "-rep":
                                        case "-—Ä–µ–ø":
                                            if (ctx.message?.reply_to_message?.from?.id != ctx.message?.from.id) {
                                                recordRatingChange({from: user, to: targetUser, value: -1}, ctx);
                                            }
                                            break;
                                    }
                                }
                            })

                    } else {
                        switch (msg.toLowerCase().trim()) {
                            case "?rep":
                            case "?—Ä–µ–ø":
                                getUserRatingMessage(user); // –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
                                break;
                            default:
                                defaultAnswer(ctx);
                        }
                    }
                }
            })
    }
};
